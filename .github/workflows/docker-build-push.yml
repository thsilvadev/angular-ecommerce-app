name: Build and Push Docker images

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  # repository names in Docker Hub namespace (will use secret DOCKERHUB_USERNAME)
  CLIENT_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/angular-ecommerce-client
  SERVER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/angular-ecommerce-server


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ github.sha }}
          # cache-from: type=registry,ref=${{ env.CLIENT_IMAGE }}:latest
          # cache-to: type=inline
          no-cache: true

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:latest
            ${{ env.SERVER_IMAGE }}:${{ github.sha }}
          # cache-from: type=registry,ref=${{ env.SERVER_IMAGE }}:latest
          # cache-to: type=inline
          no-cache: true
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Add EC2 hostkey
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Rollout with SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}  # ex.: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            echo ">> Atualizando FRONTEND"
            sudo kubectl rollout restart deployment frontend -n app-demo

            echo ">> Atualizando BACKEND"
            sudo kubectl rollout restart deployment backend -n app-demo